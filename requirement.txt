Custom Counter Hook and Error Boundary Implementation

A. Introduction

The purpose of this project is to create a custom counter hook with essential functionalities such as increment, decrement, reset, and setValue, along with a user-friendly UI. Additionally, the project requires the implementation of specific pages, including a custom hook page, a 404 error page, and a page for testing error boundaries.

B. Functional Requirements

B.1 Custom Counter Hook

1. Increment Functionality:
   - When the user triggers the increment function, the counter value increases by 1.
   
2. Decrement Functionality:
   - When the user triggers the decrement function, the counter value decreases by 1.
   
3. Reset Functionality:
   - When the user triggers the reset function, the counter value resets to 0.
  
4. setValue Functionality:
   - When the user triggers the setValue function with a specific value as a parameter, the counter is set to that value.

B.2 User Interface (UI) Requirements

1. Home Page:
-A visually appealing page displaying the custom counter hook link, 404 error page link and the error boundary test link.

2. Custom Hook Page:
   - A visually appealing page displaying the custom counter hook.
   - Buttons for increment, decrement, reset, and input field with a "Set Value" button for setValue functionality.
   - Display of current counter value.
   
3. 404 Error Page:
   - Implementation of a user-friendly 404 error page with a clear message indicating that the requested page was not found.
   
4. Error Boundary Testing Page:
   - A page specifically designed to test error boundaries.
   - Adding components that might throw errors to evaluate the error boundary's effectiveness.

B.3 Technical Requirements

1. Custom Counter Hook Implementation:
   - Implementation of the custom counter hook with appropriate logic and error handling.
   
2. UI Design and Styling:
   - Designing the UI layout for the home page, custom hook page, 404 error page, and error boundary testing page.
   - Ensuring responsive design for various devices and screen sizes.
   
 C. Error Boundary Implementation:
   - Implementation of error boundaries to catch JavaScript errors anywhere in the component tree.
   - Defining appropriate fallback UI to be displayed when an error occurs within the error boundary.

C. Non-Functional Requirements

1. Performance:
   - The custom counter hook handles increments, decrements, resets, and value setting quickly, ensuring a smooth user experience.
   
2. Usability:
   - The UI is intuitive and user-friendly, allowing users to interact with the counter easily.
   
3. Reliability:
   - The counter hook handles edge cases and invalid inputs gracefully without crashing the application.

4. Security:
   - Implementation of secure coding practices to prevent common vulnerabilities such as cross-site scripting (XSS) and injection attacks.

 D. Assumptions and Constraints

- The project assumes the availability of a JavaScript framework or library (e.g., React) for building the user interface.
- The project is limited to implementing the custom counter hook, UI, and specified pages without integrating with external databases or APIs.

 E. Conclusion

This project aims to create a robust custom counter hook with a seamless user interface, ensuring a positive user experience. By meeting the outlined requirements, the application will provide users with an efficient way to interact with the counter functionalities while also handling errors gracefully through error boundaries.

LIBRARIES
React
react-error-boundary
react-router-dom
